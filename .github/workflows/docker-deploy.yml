name: Build and Push Docker

on:
  push:
    branches: ["main", "live"]

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      - name: Log in to GHCR
        # if: steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true'
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Frontend Image
        # if: steps.changes.outputs.frontend == 'true'
        run: |
          docker build ./frontend --file ./frontend/Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:${{ github.ref_name }} \
            --build-arg NUXT_PUBLIC_API_BASE=https://tutor.ethz.ch/api \

      - name: Build backend Image
        if: steps.changes.outputs.backend == 'true'
        run: |
          docker build ./backend --file ./backend/Dockerfile \
            --tag ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:${{ github.ref_name }} \

      - name: Push frontend Image
        # if: steps.changes.outputs.frontend == 'true'
        run: docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:${{ github.ref_name }}

      - name: Push backend Image
        if: steps.changes.outputs.backend == 'true'
        run: docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:${{ github.ref_name }}

  # Deployment testing job
  test-deployment:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/live'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Docker images
        run: |
          docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:${{ github.ref_name }}

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DB_USER=test_user
          DB_PASSWORD=test_password
          DB_NAME=test_db
          DB_HOST=localhost
          DB_PORT=5432
          CORS_ORIGINS=http://localhost:3000,http://localhost:80
          GITHUB_REPOSITORY_OWNER=${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME=${{ github.event.repository.name }}
          GITHUB_REF_NAME=${{ github.ref_name }}
          EOF

      - name: Start test containers
        run: |
          # Start database first
          docker run -d --name test-db \
            -p 5432:5432 \
            -e POSTGRES_USER=test_user \
            -e POSTGRES_PASSWORD=test_password \
            -e POSTGRES_DB=test_db \
            postgres:17-alpine

          # Wait for database to be ready
          sleep 10
          
          # Start backend
          docker run -d --name test-backend \
            --network host \
            --env-file .env.test \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-backend:${{ github.ref_name }}

          # Start frontend
          docker run -d --name test-frontend \
            -p 3000:80 \
            -e NUXT_PUBLIC_API_BASE=http://localhost:8000 \
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-frontend:${{ github.ref_name }}

          # Wait for services to start
          sleep 15

      - name: Run deployment health checks
        run: |
          chmod +x ./scripts/health-check.sh
          BACKEND_URL=http://localhost:8000 FRONTEND_URL=http://localhost:3000 ./scripts/health-check.sh

      - name: Cleanup test containers
        if: always()
        run: |
          docker stop test-frontend test-backend test-db || true
          docker rm test-frontend test-backend test-db || true
