"""Initial migration

Revision ID: 7ea0b31d4194
Revises:
Create Date: 2025-07-25 11:20:31.333839

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "7ea0b31d4194"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task")
    op.drop_table("course")
    op.drop_table("chunk")
    op.drop_table("document")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "document",
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("key_points", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("source_file", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("total_chunks", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="document_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "chunk",
        sa.Column("document_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("chunk_index", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("chunk_text", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("chunk_metadata", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["document_id"], ["document.id"], name="chunk_document_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="chunk_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "course",
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="course_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "task",
        sa.Column(
            "type",
            postgresql.ENUM(
                "TRUE_FALSE", "MULTIPLE_CHOICE", "FREE_TEXT", name="tasktype"
            ),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("question", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("options_json", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("correct_answer", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("course_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("document_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("chunk_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "updated_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["chunk_id"], ["chunk.id"], name=op.f("task_chunk_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["course_id"], ["course.id"], name=op.f("task_course_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["document_id"], ["document.id"], name=op.f("task_document_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("task_pkey")),
    )
    # ### end Alembic commands ###
